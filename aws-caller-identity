variable "aws_contexts" {
  type = map(object({
    profile = string
    region  = string
  }))
}

provider "aws" {
  for_each = var.aws_contexts

  alias   = each.key
  profile = each.value.profile
  region  = each.value.region
}

data "aws_caller_identity" "current" {
  for_each = var.aws_contexts
}

output "caller_identities" {
  value = {
    for key, caller_identity in data.aws_caller_identity.current : key => caller_identity.account_id
  }
}
variable "aws_contexts" {
  type = map(object({
    profile   = string
    region    = string
    role_arn  = string
  }))
}

data "aws_security_token" "assume_role" {
  for_each = var.aws_contexts

  provider = aws.assume_role
  role_arn = each.value.role_arn
}

provider "aws" {
  for_each = var.aws_contexts

  alias   = each.key
  region  = each.value.region

  assume_role {
    role_arn = each.value.role_arn
  }
}

data "aws_caller_identity" "current" {
  for_each = var.aws_contexts

  provider = aws[each.key]
}

output "caller_identities" {
  value = {
    for key, caller_identity in data.aws_caller_identity.current : key => caller_identity.account_id
  }
}
variable "aws_contexts" {
  type = map(object({
    profile   = string
    region    = string
    role_arn  = string
  }))
}

data "aws_security_token" "assume_role" {
  for_each = var.aws_contexts

  provider = aws.assume_role
  role_arn = each.value.role_arn
}

provider "aws" {
  for_each = var.aws_contexts

  alias   = each.key
  region  = each.value.region

  assume_role {
    role_arn = each.value.role_arn
  }
}

data "aws_caller_identity" "current" {
  for_each = var.aws_contexts

  provider = aws[each.key]
}

output "caller_identities" {
  value = {
    for key, caller_identity in data.aws_caller_identity.current : key => caller_identity.account_id
  }
}

variable "aws_contexts" {
  type = map(object({
    profile   = string
    region    = string
    role_arn  = string
  }))
}

variable "target_admin_role_arn" {
  type = string
}

data "aws_security_token" "assume_role" {
  for_each = var.aws_contexts

  provider = aws.assume_role
  role_arn = each.value.role_arn
}

provider "aws" {
  for_each = var.aws_contexts

  alias   = each.key
  region  = each.value.region

  assume_role {
    role_arn = each.value.role_arn
  }
}

data "aws_caller_identity" "current" {
  for_each = var.aws_contexts

  provider = aws[each.key]
}

output "caller_identities" {
  value = {
    for key, caller_identity in data.aws_caller_identity.current : key => caller_identity.account_id
  }
}

variable "provider_config" {
  type = object({
    alias   = string
    profile = string
    region  = string
  })
}

provider "aws" {
  alias   = var.provider_config.alias
  profile = var.provider_config.profile
  region  = var.provider_config.region
}

data "aws_caller_identity" "current" {}


Error: Reference to undeclared module
│
│   on output.tf line 2, in output "bucket_domain_name":
│    2:   value = module.aws_s3_bucket.sdm-dataingest-cft.bucket_domain_name
│
│ No module call named "aws_s3_bucket" is declared in the root module.
╵
╷
│ Error: Reference to undeclared module
│
│   on splunk.tf line 4, in module "splunk-s3":
│    4:    bucket_domain_name     = module.aws_s3_bucket.sdm-dataingest-cft.bucket_domain_name
│
│ No module call named "aws_s3_bucket" is declared in the root module.
╵

C:\Users\IslamM\test3\terraform>terraform plan
╷
│ Error: Unsupported attribute
│
│   on output.tf line 2, in output "bucket_domain_name":
│    2:   value = module.splunk-s3.sdm-dataingest-cft.bucket_domain_name
│     ├────────────────
│     │ module.splunk-s3 is a object
│
│ This object does not have an attribute named "sdm-dataingest-cft".
╵
╷
│ Error: Unsupported attribute
│
│   on splunk.tf line 4, in module "splunk-s3":
│    4:    bucket_domain_name     = module.splunk-s3.sdm-dataingest-cft.bucket_domain_name
│     ├────────────────
│     │ module.splunk-s3 is a object
│
│ This object does not have an attribute named "sdm-dataingest-cft".



