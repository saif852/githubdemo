resource "aws_cloudformation_stack_set_instance" "SplunkDM" {
  account_id     = data.aws_caller_identity.current.account_id
  region         = data.aws_region.current.name
  stack_set_name = aws_cloudformation_stack_set.SplunkDM.name
  
  operation_preferences {
    region_order            = ["us-west-2"]
    failure_tolerance_count = 1
    max_concurrent_count    = 1
  }
}
# Define a list of regions where you want to deploy the StackSet
variable "regions" {
  type    = list(string)
  default = ["us-west-2", "eu-west-1"]  # Add or remove regions as needed
}

# Define a list of AWS account IDs where you want to deploy the StackSet
variable "account_ids" {
  type    = list(string)
  default = []  # Add or remove account IDs as needed
}

# Configure AWS provider
provider "aws" {
  region = var.regions[0]  # Use the first region for provider configuration
}

# Define CloudFormation StackSet
resource "aws_cloudformation_stack_set" "example_stackset" {
  name                   = "example-stackset"
  template_body          = file("example-stackset-template.yaml")
  capabilities           = ["CAPABILITY_IAM", "CAPABILITY_NAMED_IAM"]
  administration_role_arn = "arn:aws:iam::123456789012:role/CloudFormationStackSetAdministrationRole" # Specify the ARN of your administration role

  # Iterate over the list of regions and AWS account IDs
  dynamic "stack_instances" {
    for_each = { for idx, region in var.regions : idx => {
      region = region
      accounts = [var.account_ids[idx]]
    }}

    content {
      region = stack_instances.value.region

      deployment_targets {
        accounts = stack_instances.value.accounts
      }
    }
  }
}

# Plan and Apply the Terraform configuration
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 3.0"
    }
  }
}
# Ensure the random provider is defined
terraform {
  required_providers {
    random = {
      source  = "hashicorp/random"
      version = "3.1.0"
    }
  }
}

# Generate a random UUID
resource "random_uuid" "bucket_uuid" {}

# Create the S3 bucket with the UUID in its name
resource "aws_s3_bucket" "example" {
  bucket = "sdm-dataingest-cft-${random_uuid.bucket_uuid.result}"

  # Other S3 bucket configuration options can go here
  acl    = "private"

  tags = {
    Name        = "example-bucket"
    Environment = "Dev"
  }
}

# Optionally, if you are creating other resources, you can reference the bucket name
output "bucket_name" {
  value = aws_s3_bucket.example.bucket
}
